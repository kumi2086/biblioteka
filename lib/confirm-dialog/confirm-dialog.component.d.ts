import { OnInit, EventEmitter, ChangeDetectorRef, AfterViewInit, QueryList, ElementRef } from '@angular/core';
import { ShortcutInput } from 'ng-keyboard-shortcuts';
import { CheckBoxType, ConfirmButtonConfig, DynamicButton, GeniusSummaryGroup, GroupMessage, KindDialog, RadioBoxType } from './confirm-dialog.model';
import { DxButtonComponent } from 'devextreme-angular';
import { EventService } from '../event.service';
import * as i0 from "@angular/core";
export declare class ConfirmDialogComponent implements OnInit, AfterViewInit {
    event: EventService;
    cd: ChangeDetectorRef;
    onRemoving: EventEmitter<true | GroupMessage | RadioBoxType[] | CheckBoxType[] | {
        checkBoxList: CheckBoxType[];
        radioBoxList: RadioBoxType[];
    }>;
    onClosing: EventEmitter<any>;
    onCanceling: EventEmitter<any>;
    onDynamicBtnClicked: EventEmitter<any>;
    onDestroy: EventEmitter<any>;
    nobtn: DxButtonComponent;
    yesbtn: DxButtonComponent;
    cancelbtn: DxButtonComponent;
    dynamicButtons: QueryList<ElementRef>;
    group: any;
    btnConfig: ConfirmButtonConfig;
    checkBoxList: CheckBoxType[];
    confirmHeader: string;
    confirmText: string;
    disableRefreshShortcut: boolean;
    dynamicBtns: DynamicButton[] | any;
    genius: GeniusSummaryGroup[] | any;
    groupMsg: GroupMessage | any;
    isVisible: boolean;
    kindDialog: KindDialog;
    paramsMsg: {
        [key: string]: string | number;
    };
    radioBoxList: RadioBoxType[];
    showIcon: boolean;
    textAligne: string;
    title: string;
    width: number | string;
    shortcuts: ShortcutInput[];
    unicalGuid: number;
    constructor(event: EventService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    onCancel: () => void;
    setFocus(): void;
    onInit(e: any): void;
    ngAfterViewInit(): void;
    onClose: (e?: any) => void;
    ngModelChange(): void;
    ngOnDestroy(): void;
    onRemove: () => void;
    onDynamicBtnClick(e: any): void;
    disabledButton(check: any): any;
    checkValue(check: any): any;
    onDynamicBtnArrowLeft(i: any): void;
    onDynamicBtnArrowRight(i: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConfirmDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ConfirmDialogComponent, "app-confirm-dialog", never, { "btnConfig": { "alias": "btnConfig"; "required": false; }; "checkBoxList": { "alias": "checkBoxList"; "required": false; }; "confirmHeader": { "alias": "confirmHeader"; "required": false; }; "confirmText": { "alias": "confirmText"; "required": false; }; "disableRefreshShortcut": { "alias": "disableRefreshShortcut"; "required": false; }; "dynamicBtns": { "alias": "dynamicBtns"; "required": false; }; "genius": { "alias": "genius"; "required": false; }; "groupMsg": { "alias": "groupMsg"; "required": false; }; "isVisible": { "alias": "isVisible"; "required": false; }; "kindDialog": { "alias": "kindDialog"; "required": false; }; "paramsMsg": { "alias": "paramsMsg"; "required": false; }; "radioBoxList": { "alias": "radioBoxList"; "required": false; }; "showIcon": { "alias": "showIcon"; "required": false; }; "textAligne": { "alias": "textAligne"; "required": false; }; "title": { "alias": "title"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, { "onRemoving": "onRemoving"; "onClosing": "onClosing"; "onCanceling": "onCanceling"; "onDynamicBtnClicked": "onDynamicBtnClicked"; "onDestroy": "onDestroy"; }, never, never, true, never>;
}
